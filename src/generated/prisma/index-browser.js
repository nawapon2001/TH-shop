
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  category: 'category',
  description: 'description',
  image: 'image',
  images: 'images',
  rating: 'rating',
  reviews: 'reviews',
  sold: 'sold',
  discountPercent: 'discountPercent',
  deliveryInfo: 'deliveryInfo',
  promotions: 'promotions',
  stock: 'stock',
  sellerId: 'sellerId',
  sellerUsername: 'sellerUsername',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductOptionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  productId: 'productId'
};

exports.Prisma.ProductOptionValueScalarFieldEnum = {
  id: 'id',
  value: 'value',
  price: 'price',
  priceType: 'priceType',
  stock: 'stock',
  sku: 'sku',
  optionId: 'optionId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  iconType: 'iconType',
  iconName: 'iconName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellerScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  shopName: 'shopName',
  fullName: 'fullName',
  email: 'email',
  phone: 'phone',
  image: 'image',
  address: 'address',
  birthDate: 'birthDate',
  province: 'province',
  description: 'description',
  shopImage: 'shopImage',
  bankAccount: 'bankAccount',
  bankName: 'bankName',
  accountHolderName: 'accountHolderName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  totalAmount: 'totalAmount',
  status: 'status',
  customerInfo: 'customerInfo',
  shippingInfo: 'shippingInfo',
  items: 'items',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  user: 'user',
  items: 'items',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  url: 'url',
  image: 'image',
  contentType: 'contentType',
  isSmall: 'isSmall',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  type: 'type',
  isActive: 'isActive',
  image: 'image',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminUserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderMessageScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  sender: 'sender',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  name: 'name',
  category: 'category',
  description: 'description',
  image: 'image',
  deliveryInfo: 'deliveryInfo',
  sellerUsername: 'sellerUsername'
};

exports.Prisma.ProductOptionOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ProductOptionValueOrderByRelevanceFieldEnum = {
  value: 'value',
  priceType: 'priceType',
  sku: 'sku'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  icon: 'icon',
  iconType: 'iconType',
  iconName: 'iconName'
};

exports.Prisma.SellerOrderByRelevanceFieldEnum = {
  username: 'username',
  password: 'password',
  shopName: 'shopName',
  fullName: 'fullName',
  email: 'email',
  phone: 'phone',
  image: 'image',
  address: 'address',
  birthDate: 'birthDate',
  province: 'province',
  description: 'description',
  shopImage: 'shopImage',
  bankAccount: 'bankAccount',
  bankName: 'bankName',
  accountHolderName: 'accountHolderName'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  orderNumber: 'orderNumber',
  status: 'status'
};

exports.Prisma.WishlistOrderByRelevanceFieldEnum = {
  user: 'user'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  address: 'address'
};

exports.Prisma.BannerOrderByRelevanceFieldEnum = {
  filename: 'filename',
  url: 'url',
  contentType: 'contentType'
};

exports.Prisma.AnnouncementOrderByRelevanceFieldEnum = {
  title: 'title',
  content: 'content',
  type: 'type',
  image: 'image'
};

exports.Prisma.AdminUserOrderByRelevanceFieldEnum = {
  username: 'username',
  email: 'email',
  password: 'password',
  role: 'role'
};

exports.Prisma.OrderMessageOrderByRelevanceFieldEnum = {
  sender: 'sender',
  message: 'message'
};


exports.Prisma.ModelName = {
  Product: 'Product',
  ProductOption: 'ProductOption',
  ProductOptionValue: 'ProductOptionValue',
  Category: 'Category',
  Seller: 'Seller',
  Order: 'Order',
  Wishlist: 'Wishlist',
  User: 'User',
  Banner: 'Banner',
  Announcement: 'Announcement',
  AdminUser: 'AdminUser',
  OrderMessage: 'OrderMessage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
