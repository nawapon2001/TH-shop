// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Prisma Client ‡∏Å‡∏±‡∏ö MySQL
import { PrismaClient } from '../src/generated/prisma';

const prisma = new PrismaClient();

async function testPrisma() {
  try {
    console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Prisma Client...');
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const productCount = await prisma.product.count();
    const categoryCount = await prisma.category.count();
    const sellerCount = await prisma.seller.count();
    const orderCount = await prisma.order.count();
    
    console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log(`  - Products: ${productCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`  - Categories: ${categoryCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`  - Sellers: ${sellerCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`  - Orders: ${orderCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query products ‡∏û‡∏£‡πâ‡∏≠‡∏° options
    const products = await prisma.product.findMany({
      take: 3,
      include: {
        options: {
          include: {
            values: true
          }
        }
      }
    });
    
    console.log('\nüì¶ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Products:');
    products.forEach(product => {
      console.log(`  - ${product.name} (‡∏ø${product.price})`);
      if (product.options.length > 0) {
        console.log(`    Options: ${product.options.length} ‡∏ä‡∏∏‡∏î`);
      }
    });
    
    console.log('\n‚úÖ Prisma Client ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥!');
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testPrisma();
