// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API routes ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô Prisma ‡πÅ‡∏•‡πâ‡∏ß
import { PrismaClient } from '../src/generated/prisma';

const prisma = new PrismaClient();

async function testApiRoutes() {
  try {
    console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Routes ‡∏Å‡∏±‡∏ö Prisma...\n');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET /api/products
    console.log('1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET /api/products');
    try {
      const response = await fetch('http://localhost:3000/api/products');
      const products = await response.json();
      console.log(`‚úÖ GET /api/products: ${products.length} ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤`);
      if (products.length > 0) {
        console.log(`   ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ${products[0].name} (‡∏ø${products[0].price})`);
      }
    } catch (err) {
      console.log('‚ùå GET /api/products failed:', err);
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET /api/sellers
    console.log('\n2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET /api/sellers');
    try {
      const response = await fetch('http://localhost:3000/api/sellers');
      const sellers = await response.json();
      console.log(`‚úÖ GET /api/sellers: ${sellers.length} ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢`);
      if (sellers.length > 0) {
        console.log(`   ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ${sellers[0].username}`);
      }
    } catch (err) {
      console.log('‚ùå GET /api/sellers failed:', err);
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET /api/orders
    console.log('\n3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET /api/orders');
    try {
      const response = await fetch('http://localhost:3000/api/orders');
      const orders = await response.json();
      console.log(`‚úÖ GET /api/orders: ${orders.length} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠`);
      if (orders.length > 0) {
        console.log(`   ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ${orders[0].orderNumber} (‡∏ø${orders[0].totalAmount})`);
      }
    } catch (err) {
      console.log('‚ùå GET /api/orders failed:', err);
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET single product
    console.log('\n4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET /api/products/[id]');
    try {
      const firstProduct = await prisma.product.findFirst();
      if (firstProduct) {
        const response = await fetch(`http://localhost:3000/api/products/${firstProduct.id}`);
        const product = await response.json();
        console.log(`‚úÖ GET /api/products/${firstProduct.id}: ${product.name}`);
        console.log(`   Options: ${product.options?.length || 0} ‡∏ä‡∏∏‡∏î`);
      } else {
        console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
      }
    } catch (err) {
      console.log('‚ùå GET /api/products/[id] failed:', err);
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö POST ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
    console.log('\n5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö POST /api/products (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö)');
    try {
      const testProduct = {
        name: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ' + Date.now(),
        price: 599,
        category: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        description: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô Prisma',
        images: [],
        options: [
          {
            name: '‡∏Ç‡∏ô‡∏≤‡∏î',
            values: [
              { value: 'S', price: 0, priceType: 'add', stock: 10 },
              { value: 'M', price: 50, priceType: 'add', stock: 15 },
              { value: 'L', price: 100, priceType: 'add', stock: 8 }
            ]
          }
        ]
      };

      const response = await fetch('http://localhost:3000/api/products', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testProduct)
      });

      const result = await response.json();
      if (response.ok) {
        console.log(`‚úÖ POST /api/products: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID ${result.id}`);
        console.log(`   ${result.product.name} - ${result.product.options.length} options`);
      } else {
        console.log('‚ùå POST /api/products failed:', result.message);
      }
    } catch (err) {
      console.log('‚ùå POST /api/products failed:', err);
    }

    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Routes ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:');
    
    const stats = await Promise.all([
      prisma.product.count(),
      prisma.category.count(),
      prisma.seller.count(),
      prisma.order.count()
    ]);

    console.log(`   ‚Ä¢ Products: ${stats[0]} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`   ‚Ä¢ Categories: ${stats[1]} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`   ‚Ä¢ Sellers: ${stats[2]} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`   ‚Ä¢ Orders: ${stats[3]} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testApiRoutes();
