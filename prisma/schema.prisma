// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  price           Float
  category        String?          @db.VarChar(100)
  description     String?          @db.Text
  image           String?          @db.VarChar(500)
  images          Json?            // JSON array สำหรับ images
  options         ProductOption[]
  rating          Float            @default(0)
  reviews         Int              @default(0)
  sold            Int              @default(0)
  discountPercent Int              @default(0)
  deliveryInfo    String?          @db.VarChar(255)
  promotions      Json?            // JSON array สำหรับ promotions
  stock           Int              @default(999)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("products")
}

model ProductOption {
  id        Int                  @id @default(autoincrement())
  name      String               @db.VarChar(100)
  product   Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  values    ProductOptionValue[]

  @@map("product_options")
}

model ProductOptionValue {
  id        Int           @id @default(autoincrement())
  value     String        @db.VarChar(100)
  price     Float         @default(0)
  priceType String        @default("add") @db.VarChar(10) // 'add' หรือ 'replace'
  stock     Int           @default(0)
  sku       String?       @db.VarChar(50)
  option    ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId  Int

  @@map("product_option_values")
}

// Table สำหรับ Categories (ถ้าต้องการแยกออกมา)
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

// Table สำหรับ Sellers (ถ้ามีระบบผู้ขาย)
model Seller {
  id       Int     @id @default(autoincrement())
  username String  @unique @db.VarChar(50)
  shopName String? @db.VarChar(100)
  fullName String? @db.VarChar(100)
  email    String? @unique @db.VarChar(100)
  phone    String? @db.VarChar(20)
  image    String? @db.VarChar(500)
  address  String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sellers")
}

// Table สำหรับ Orders (หากต้องการ)
model Order {
  id          Int      @id @default(autoincrement())
  orderNumber String   @unique @db.VarChar(50)
  totalAmount Float
  status      String   @default("pending") @db.VarChar(20) // pending, confirmed, shipped, delivered, cancelled
  customerInfo Json    // ข้อมูลลูกค้า
  shippingInfo Json?   // ข้อมูลการจัดส่ง
  items       Json     // รายการสินค้าที่สั่ง
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("orders")
}
